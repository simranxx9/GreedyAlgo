// { Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


 // } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool comfun(Job a, Job b)
    {
        if(a.profit == b.profit)
            return a.dead < b.dead;
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<int> v;
        
        sort(arr,arr + n,comfun);
        // for(int i =0 ;i<n ; i++)
        // {
        //     cout<<arr[i].id<<"  "<<arr[i].dead<<"  "<<arr[i].profit<<endl;
        // }
        int total_jobs = 0, sum = 0;
        int large_dead = arr[0].dead;
        for(int i =0 ; i < n ; i ++ )
        {
            large_dead = max(large_dead, arr[i].dead);
            
        }
        vector<int> a(large_dead+1, -1);
        for(int i = 0;i < n ; i ++ )
        {
            if(a[arr[i].dead] == -1)
            {
                a[arr[i].dead] = arr[i].id;
                total_jobs += 1;
                sum += arr[i].profit;
                
            }
            else{
                int curr_dead = arr[i].dead - 1;
                while(a[curr_dead] != -1 && curr_dead!= 0) curr_dead--;
                if(a[curr_dead] == -1 && curr_dead!=0)
                {
                    a[curr_dead] = arr[i].id;
                    total_jobs += 1;
                    sum += arr[i].profit;
                }
                
                
            }
        }
        
        // cout<<large_dead<<endl;
        v.push_back(total_jobs);
        v.push_back(sum);
        return v;
    } 
};

// { Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}


  // } Driver Code Ends
