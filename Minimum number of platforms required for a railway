// { Driver Code Starts
// Program to find minimum number of platforms
// required on a railway station
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
    public:
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	sort(arr, arr+n);
    	sort(dep, dep+n);
    	vector<pair<int, int>> p;
    	for(int i = 0 ; i < n ; i ++ )
    	{
    	    p.push_back(make_pair(arr[i], dep[i]));
    	}
    	int j = 0 ,count = 1, i =1;
    // 	pair<int , int> mini;
    // 	mini.first = p[0].first;
    // 	mini.second = p[0].second;
    	int no_plartform = 1;
    	while(i<n && j<n)
    	{
    	    if(p[j].second < p[i].first )
    	    {
    	       // mini.first = p[i].first;
    	       // mini.second = p[i].second;
    	       j++;
    	       no_plartform --;
    	    }
    	    else if(p[j].second >= p[i].first){
    	       // mini.second = min(mini.second, p[i].second);
    	       no_plartform++;
    	       i++;
    	        
    	    }
    	    count = max(count,no_plartform);
    	}
    	return count;
    }
};


// { Driver Code Starts.
// Driver code
int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        int dep[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        for(int j=0;j<n;j++){
            cin>>dep[j];
        }
        Solution ob;
        cout <<ob.findPlatform(arr, dep, n)<<endl;
    } 
   return 0;
}  // } Driver Code Ends
